cc.DrawNode=cc.Node.extend({_buffer:null,_blendFunc:null,_lineWidth:1,_drawColor:null,getBlendFunc:function(){return this._blendFunc},setBlendFunc:function(blendFunc,dst){void 0===dst?(this._blendFunc.src=blendFunc.src,this._blendFunc.dst=blendFunc.dst):(this._blendFunc.src=blendFunc,this._blendFunc.dst=dst)},setLineWidth:function(width){this._lineWidth=width},getLineWidth:function(){return this._lineWidth},setDrawColor:function(color){var locDrawColor=this._drawColor;locDrawColor.r=color.r,locDrawColor.g=color.g,locDrawColor.b=color.b,locDrawColor.a=null==color.a?255:color.a},getDrawColor:function(){return cc.color(this._drawColor.r,this._drawColor.g,this._drawColor.b,this._drawColor.a)}}),cc.DrawNode.create=function(){return new cc.DrawNode},cc.DrawNode.TYPE_DOT=0,cc.DrawNode.TYPE_SEGMENT=1,cc.DrawNode.TYPE_POLY=2,cc.game.addEventListener(cc.game.EVENT_RENDERER_INITED,function(){function pMultOut(pin,floatVar,pout){pout.x=pin.x*floatVar,pout.y=pin.y*floatVar}if(cc._renderType===cc.game.RENDER_TYPE_CANVAS)cc._DrawNodeElement=function(type,verts,fillColor,lineWidth,lineColor,lineCap,isClosePolygon,isFill,isStroke){var _t=this;_t.type=type,_t.verts=verts||null,_t.fillColor=fillColor||null,_t.lineWidth=lineWidth||0,_t.lineColor=lineColor||null,_t.lineCap=lineCap||"butt",_t.isClosePolygon=isClosePolygon||!1,_t.isFill=isFill||!1,_t.isStroke=isStroke||!1},cc.extend(cc.DrawNode.prototype,{_className:"DrawNodeCanvas",ctor:function(){cc.Node.prototype.ctor.call(this);var locCmd=this._renderCmd;locCmd._buffer=this._buffer=[],locCmd._drawColor=this._drawColor=cc.color(255,255,255,255),locCmd._blendFunc=this._blendFunc=new cc.BlendFunc(cc.SRC_ALPHA,cc.ONE_MINUS_SRC_ALPHA),this.init(),this._localBB=new cc.Rect},setLocalBB:function(rectorX,y,width,height){var localBB=this._localBB;void 0===y?(localBB.x=rectorX.x,localBB.y=rectorX.y,localBB.width=rectorX.width,localBB.height=rectorX.height):(localBB.x=rectorX,localBB.y=y,localBB.width=width,localBB.height=height)},drawRect:function(origin,destination,fillColor,lineWidth,lineColor){lineWidth=null==lineWidth?this._lineWidth:lineWidth,null==(lineColor=lineColor||this.getDrawColor()).a&&(lineColor.a=255);var vertices=[origin,cc.p(destination.x,origin.y),destination,cc.p(origin.x,destination.y)],element=new cc._DrawNodeElement(cc.DrawNode.TYPE_POLY);element.verts=vertices,element.lineWidth=lineWidth,element.lineColor=lineColor,element.isClosePolygon=!0,element.isStroke=!0,element.lineCap="butt",element.fillColor=fillColor,fillColor&&(null==fillColor.a&&(fillColor.a=255),element.isFill=!0),this._buffer.push(element)},drawCircle:function(center,radius,angle,segments,drawLineToCenter,lineWidth,color){lineWidth=lineWidth||this._lineWidth,null==(color=color||this.getDrawColor()).a&&(color.a=255);for(var coef=2*Math.PI/segments,vertices=[],i=0;i<=segments;i++){var rads=i*coef,j=radius*Math.cos(rads+angle)+center.x,k=radius*Math.sin(rads+angle)+center.y;vertices.push(cc.p(j,k))}drawLineToCenter&&vertices.push(cc.p(center.x,center.y));var element=new cc._DrawNodeElement(cc.DrawNode.TYPE_POLY);element.verts=vertices,element.lineWidth=lineWidth,element.lineColor=color,element.isClosePolygon=!0,element.isStroke=!0,this._buffer.push(element)},drawQuadBezier:function(origin,control,destination,segments,lineWidth,color){lineWidth=lineWidth||this._lineWidth,null==(color=color||this.getDrawColor()).a&&(color.a=255);for(var vertices=[],t=0,i=0;i<segments;i++){var x=Math.pow(1-t,2)*origin.x+2*(1-t)*t*control.x+t*t*destination.x,y=Math.pow(1-t,2)*origin.y+2*(1-t)*t*control.y+t*t*destination.y;vertices.push(cc.p(x,y)),t+=1/segments}vertices.push(cc.p(destination.x,destination.y));var element=new cc._DrawNodeElement(cc.DrawNode.TYPE_POLY);element.verts=vertices,element.lineWidth=lineWidth,element.lineColor=color,element.isStroke=!0,element.lineCap="round",this._buffer.push(element)},drawCubicBezier:function(origin,control1,control2,destination,segments,lineWidth,color){lineWidth=lineWidth||this._lineWidth,null==(color=color||this.getDrawColor()).a&&(color.a=255);for(var vertices=[],t=0,i=0;i<segments;i++){var x=Math.pow(1-t,3)*origin.x+3*Math.pow(1-t,2)*t*control1.x+3*(1-t)*t*t*control2.x+t*t*t*destination.x,y=Math.pow(1-t,3)*origin.y+3*Math.pow(1-t,2)*t*control1.y+3*(1-t)*t*t*control2.y+t*t*t*destination.y;vertices.push(cc.p(x,y)),t+=1/segments}vertices.push(cc.p(destination.x,destination.y));var element=new cc._DrawNodeElement(cc.DrawNode.TYPE_POLY);element.verts=vertices,element.lineWidth=lineWidth,element.lineColor=color,element.isStroke=!0,element.lineCap="round",this._buffer.push(element)},drawCatmullRom:function(points,segments,lineWidth,color){this.drawCardinalSpline(points,.5,segments,lineWidth,color)},drawCardinalSpline:function(config,tension,segments,lineWidth,color){lineWidth=lineWidth||this._lineWidth,null==(color=color||this.getDrawColor()).a&&(color.a=255);for(var p,lt,vertices=[],deltaT=1/config.length,i=0;i<segments+1;i++){var dt=i/segments;1===dt?(p=config.length-1,lt=1):lt=(dt-deltaT*(p=0|dt/deltaT))/deltaT;var newPos=cc.cardinalSplineAt(cc.getControlPointAt(config,p-1),cc.getControlPointAt(config,p-0),cc.getControlPointAt(config,p+1),cc.getControlPointAt(config,p+2),tension,lt);vertices.push(newPos)}var element=new cc._DrawNodeElement(cc.DrawNode.TYPE_POLY);element.verts=vertices,element.lineWidth=lineWidth,element.lineColor=color,element.isStroke=!0,element.lineCap="round",this._buffer.push(element)},drawDot:function(pos,radius,color){null==(color=color||this.getDrawColor()).a&&(color.a=255);var element=new cc._DrawNodeElement(cc.DrawNode.TYPE_DOT);element.verts=[pos],element.lineWidth=radius,element.fillColor=color,this._buffer.push(element)},drawDots:function(points,radius,color){if(points&&0!=points.length){null==(color=color||this.getDrawColor()).a&&(color.a=255);for(var i=0,len=points.length;i<len;i++)this.drawDot(points[i],radius,color)}},drawSegment:function(from,to,lineWidth,color){lineWidth=lineWidth||this._lineWidth,null==(color=color||this.getDrawColor()).a&&(color.a=255);var element=new cc._DrawNodeElement(cc.DrawNode.TYPE_POLY);element.verts=[from,to],element.lineWidth=2*lineWidth,element.lineColor=color,element.isStroke=!0,element.lineCap="round",this._buffer.push(element)},drawPoly_:function(verts,fillColor,lineWidth,color){lineWidth=null==lineWidth?this._lineWidth:lineWidth,null==(color=color||this.getDrawColor()).a&&(color.a=255);var element=new cc._DrawNodeElement(cc.DrawNode.TYPE_POLY);element.verts=verts,element.fillColor=fillColor,element.lineWidth=lineWidth,element.lineColor=color,element.isClosePolygon=!0,element.isStroke=!0,element.lineCap="round",fillColor&&(element.isFill=!0),this._buffer.push(element)},drawPoly:function(verts,fillColor,lineWidth,lineColor){for(var vertsCopy=[],i=0;i<verts.length;i++)vertsCopy.push(cc.p(verts[i].x,verts[i].y));return this.drawPoly_(vertsCopy,fillColor,lineWidth,lineColor)},clear:function(){this._buffer.length=0},_createRenderCmd:function(){return new cc.DrawNode.CanvasRenderCmd(this)}});else if(cc._renderType===cc.game.RENDER_TYPE_WEBGL){var _sharedBuffer=null,_vertices=[],_from=cc.p(),_to=cc.p(),_color=new Uint32Array(1),_n=cc.p(),_t=cc.p(),_nw=cc.p(),_tw=cc.p(),_extrude=[];cc.extend(cc.DrawNode.prototype,{_bufferCapacity:0,_vertexCount:0,_offset:0,_occupiedSize:0,_f32Buffer:null,_ui32Buffer:null,_dirty:!1,_className:"DrawNodeWebGL",manualRelease:!1,ctor:function(capacity,manualRelease){cc.Node.prototype.ctor.call(this),_sharedBuffer||(_sharedBuffer=new GlobalVertexBuffer(cc._renderContext,20*cc.DRAWNODE_TOTAL_VERTICES)),this._renderCmd._shaderProgram=cc.shaderCache.programForKey(cc.SHADER_POSITION_LENGTHTEXTURECOLOR),this._blendFunc=new cc.BlendFunc(cc.SRC_ALPHA,cc.ONE_MINUS_SRC_ALPHA),this._drawColor=cc.color(255,255,255,255),this._bufferCapacity=capacity||64,this.manualRelease=manualRelease,this._dirty=!0},onEnter:function(){this._occupiedSize<this._bufferCapacity&&this._ensureCapacity(this._bufferCapacity)},onExit:function(){this.manualRelease||this.release()},release:function(){this._occupiedSize>0&&(this._vertexCount=0,_sharedBuffer.freeBuffer(this._offset,20*this._occupiedSize),this._occupiedSize=0)},_ensureCapacity:function(count){var _t=this,prev=_t._occupiedSize,prevOffset=_t._offset;if(count>prev||_t._bufferCapacity>prev){var request=Math.max(Math.min(prev+prev,200),count,_t._bufferCapacity);0!==prev&&(_sharedBuffer.freeBuffer(prevOffset,20*prev),_t._occupiedSize=0);var offset=_t._offset=_sharedBuffer.requestBuffer(20*request);if(offset>=0){if(_t._occupiedSize=_t._bufferCapacity=request,_t._f32Buffer=new Float32Array(_sharedBuffer.data,offset,5*_t._occupiedSize),_t._ui32Buffer=new Uint32Array(_sharedBuffer.data,offset,5*_t._occupiedSize),0!==prev&&prevOffset!==offset)for(var last=(prevOffset+prev)/4,i=offset/4,j=prevOffset/4;j<last;i++,j++)_sharedBuffer.dataArray[i]=_sharedBuffer.dataArray[j];return!0}return cc.warn("Failed to allocate buffer for DrawNode: buffer for "+request+" vertices requested"),!1}return!0},drawRect:function(origin,destination,fillColor,lineWidth,lineColor){lineWidth=null==lineWidth?this._lineWidth:lineWidth,lineColor=lineColor||this._drawColor,_vertices.length=0,_vertices.push(origin.x,origin.y,destination.x,origin.y,destination.x,destination.y,origin.x,destination.y),null==fillColor?this._drawSegments(_vertices,lineWidth,lineColor,!0):this.drawPoly(_vertices,fillColor,lineWidth,lineColor),_vertices.length=0},drawCircle:function(center,radius,angle,segments,drawLineToCenter,lineWidth,color){lineWidth=lineWidth||this._lineWidth,color=color||this._drawColor;var i,len,coef=2*Math.PI/segments;for(_vertices.length=0,i=0;i<=segments;i++){var rads=i*coef,j=radius*Math.cos(rads+angle)+center.x,k=radius*Math.sin(rads+angle)+center.y;_vertices.push(j,k)}for(drawLineToCenter&&_vertices.push(center.x,center.y),lineWidth*=.5,i=0,len=_vertices.length-2;i<len;i+=2)_from.x=_vertices[i],_from.y=_vertices[i+1],_to.x=_vertices[i+2],_to.y=_vertices[i+3],this.drawSegment(_from,_to,lineWidth,color);_vertices.length=0},drawQuadBezier:function(origin,control,destination,segments,lineWidth,color){lineWidth=lineWidth||this._lineWidth,color=color||this._drawColor;var t=0;_vertices.length=0;for(var i=0;i<segments;i++){var x=Math.pow(1-t,2)*origin.x+2*(1-t)*t*control.x+t*t*destination.x,y=Math.pow(1-t,2)*origin.y+2*(1-t)*t*control.y+t*t*destination.y;_vertices.push(x,y),t+=1/segments}_vertices.push(destination.x,destination.y),this._drawSegments(_vertices,lineWidth,color,!1),_vertices.length=0},drawCubicBezier:function(origin,control1,control2,destination,segments,lineWidth,color){lineWidth=lineWidth||this._lineWidth,color=color||this._drawColor;var t=0;_vertices.length=0;for(var i=0;i<segments;i++){var x=Math.pow(1-t,3)*origin.x+3*Math.pow(1-t,2)*t*control1.x+3*(1-t)*t*t*control2.x+t*t*t*destination.x,y=Math.pow(1-t,3)*origin.y+3*Math.pow(1-t,2)*t*control1.y+3*(1-t)*t*t*control2.y+t*t*t*destination.y;_vertices.push(x,y),t+=1/segments}_vertices.push(destination.x,destination.y),this._drawSegments(_vertices,lineWidth,color,!1),_vertices.length=0},drawCatmullRom:function(points,segments,lineWidth,color){this.drawCardinalSpline(points,.5,segments,lineWidth,color)},drawCardinalSpline:function(config,tension,segments,lineWidth,color){lineWidth=lineWidth||this._lineWidth,color=color||this._drawColor;var p,lt,deltaT=1/config.length;_vertices.length=0;for(var i=0;i<segments+1;i++){var dt=i/segments;1===dt?(p=config.length-1,lt=1):lt=(dt-deltaT*(p=0|dt/deltaT))/deltaT,cc.cardinalSplineAt(cc.getControlPointAt(config,p-1),cc.getControlPointAt(config,p-0),cc.getControlPointAt(config,p+1),cc.getControlPointAt(config,p+2),tension,lt,_from),_vertices.push(_from.x,_from.y)}lineWidth*=.5;for(var j=0,len=_vertices.length-2;j<len;j+=2)_from.x=_vertices[j],_from.y=_vertices[j+1],_to.x=_vertices[j+2],_to.y=_vertices[j+3],this.drawSegment(_from,_to,lineWidth,color);_vertices.length=0},drawDots:function(points,radius,color){if(points&&0!==points.length){color=color||this._drawColor;for(var i=0,len=points.length;i<len;i++)this.drawDot(points[i],radius,color)}},_render:function(){var gl=cc._renderContext;this._offset<0||this._vertexCount<=0||(this._dirty?(_sharedBuffer.updateSubData(this._offset,this._f32Buffer),this._dirty=!1):gl.bindBuffer(gl.ARRAY_BUFFER,_sharedBuffer.vertexBuffer),gl.enableVertexAttribArray(cc.VERTEX_ATTRIB_POSITION),gl.enableVertexAttribArray(cc.VERTEX_ATTRIB_COLOR),gl.enableVertexAttribArray(cc.VERTEX_ATTRIB_TEX_COORDS),gl.vertexAttribPointer(cc.VERTEX_ATTRIB_POSITION,2,gl.FLOAT,!1,20,0),gl.vertexAttribPointer(cc.VERTEX_ATTRIB_COLOR,4,gl.UNSIGNED_BYTE,!0,20,8),gl.vertexAttribPointer(cc.VERTEX_ATTRIB_TEX_COORDS,2,gl.FLOAT,!1,20,12),gl.drawArrays(gl.TRIANGLES,this._offset/20,this._vertexCount),cc.incrementGLDraws(1))},appendVertexData:function(x,y,color,u,v){var f32Buffer=this._f32Buffer,offset=5*this._vertexCount;f32Buffer[offset]=x,f32Buffer[offset+1]=y,_color[0]=color.a<<24|color.b<<16|color.g<<8|color.r,this._ui32Buffer[offset+2]=_color[0],f32Buffer[offset+3]=u,f32Buffer[offset+4]=v,this._vertexCount++},drawDot:function(pos,radius,color){null==(color=color||this._drawColor).a&&(color.a=255);var l=pos.x-radius,b=pos.y-radius,r=pos.x+radius,t=pos.y+radius;this._ensureCapacity(this._vertexCount+6)&&(this.appendVertexData(l,b,color,-1,-1),this.appendVertexData(l,t,color,-1,1),this.appendVertexData(r,t,color,1,1),this.appendVertexData(l,b,color,-1,-1),this.appendVertexData(r,t,color,1,1),this.appendVertexData(r,b,color,1,-1),this._dirty=!0)},drawSegment:function(from,to,radius,color){null==(color=color||this.getDrawColor()).a&&(color.a=255),radius=radius||.5*this._lineWidth;if(this._ensureCapacity(this._vertexCount+18)){var a=from,b=to;_n.x=a.y-b.y,_n.y=b.x-a.x,cc.pNormalizeIn(_n),_t.x=-_n.y,_t.y=_n.x,pMultOut(_n,radius,_nw),pMultOut(_t,radius,_tw);var v0x=b.x-_nw.x-_tw.x,v0y=b.y-_nw.y-_tw.y,u0=-(_n.x+_t.x),v0=-(_n.y+_t.y),v1x=b.x+_nw.x-_tw.x,v1y=b.y+_nw.y-_tw.y,u1=_n.x-_t.x,v1=_n.y-_t.y,v2x=b.x-_nw.x,v2y=b.y-_nw.y,u2=-_n.x,v2=-_n.y,v3x=b.x+_nw.x,v3y=b.y+_nw.y,u3=_n.x,v3=_n.y,v4x=a.x-_nw.x,v4y=a.y-_nw.y,u4=u2,v4=v2,v5x=a.x+_nw.x,v5y=a.y+_nw.y,u5=_n.x,v5=_n.y,v6x=a.x-_nw.x+_tw.x,v6y=a.y-_nw.y+_tw.y,u6=_t.x-_n.x,v6=_t.y-_n.y,v7x=a.x+_nw.x+_tw.x,v7y=a.y+_nw.y+_tw.y,u7=_n.x+_t.x,v7=_n.y+_t.y;this.appendVertexData(v0x,v0y,color,u0,v0),this.appendVertexData(v1x,v1y,color,u1,v1),this.appendVertexData(v2x,v2y,color,u2,v2),this.appendVertexData(v3x,v3y,color,u3,v3),this.appendVertexData(v1x,v1y,color,u1,v1),this.appendVertexData(v2x,v2y,color,u2,v2),this.appendVertexData(v3x,v3y,color,u3,v3),this.appendVertexData(v4x,v4y,color,u4,v4),this.appendVertexData(v2x,v2y,color,u2,v2),this.appendVertexData(v3x,v3y,color,u3,v3),this.appendVertexData(v4x,v4y,color,u4,v4),this.appendVertexData(v5x,v5y,color,u5,v5),this.appendVertexData(v6x,v6y,color,u6,v6),this.appendVertexData(v4x,v4y,color,u4,v4),this.appendVertexData(v5x,v5y,color,u5,v5),this.appendVertexData(v6x,v6y,color,u6,v6),this.appendVertexData(v7x,v7y,color,u7,v7),this.appendVertexData(v5x,v5y,color,u5,v5),this._dirty=!0}},drawPoly:function(verts,fillColor,borderWidth,borderColor){if("object"==typeof verts[0]){_vertices.length=0;for(i=0;i<verts.length;i++)_vertices.push(verts[i].x,verts[i].y);verts=_vertices}if(null!=fillColor){null==fillColor.a&&(fillColor.a=255),null==borderColor.a&&(borderColor.a=255),borderWidth=null==borderWidth?this._lineWidth:borderWidth,borderWidth*=.5;var v0x,v0y,v1x,v1y,v2x,v2y,factor,offx,offy,i,count=verts.length;for(_extrude.length=0,i=0;i<count;i+=2)v0x=verts[(i-2+count)%count],v0y=verts[(i-1+count)%count],v1x=verts[i],v1y=verts[i+1],v2x=verts[(i+2)%count],v2y=verts[(i+3)%count],_n.x=v0y-v1y,_n.y=v1x-v0x,_nw.x=v1y-v2y,_nw.y=v2x-v1x,cc.pNormalizeIn(_n),cc.pNormalizeIn(_nw),factor=_n.x*_nw.x+_n.y*_nw.y+1,offx=(_n.x+_nw.x)/factor,offy=(_n.y+_nw.y)/factor,_extrude.push(offx,offy,_nw.x,_nw.y);var outline=borderWidth>0,vertexCount=3*(3*(count/=2)-2);if(this._ensureCapacity(this._vertexCount+vertexCount)){var inset=0==outline?.5:0;for(i=0;i<count-2;i++)v0x=verts[0]-_extrude[0]*inset,v0y=verts[1]-_extrude[1]*inset,v1x=verts[2*i+2]-_extrude[4*(i+1)]*inset,v1y=verts[2*i+3]-_extrude[4*(i+1)+1]*inset,v2x=verts[2*i+4]-_extrude[4*(i+2)]*inset,v2y=verts[2*i+5]-_extrude[4*(i+2)+1]*inset,this.appendVertexData(v0x,v0y,fillColor,0,0),this.appendVertexData(v1x,v1y,fillColor,0,0),this.appendVertexData(v2x,v2y,fillColor,0,0);var off0x,off0y,off1x,off1y,in0x,in0y,in1x,in1y,out0x,out0y,out1x,out1y,bw=outline?borderWidth:.5,color=outline?borderColor:fillColor;for(i=0;i<count;i++){var j=(i+1)%count;v0x=verts[2*i],v0y=verts[2*i+1],v1x=verts[2*j],v1y=verts[2*j+1],_n.x=_extrude[4*i+2],_n.y=_extrude[4*i+3],_nw.x=outline?-_n.x:0,_nw.y=outline?-_n.y:0,in0x=v0x-(off0x=_extrude[4*i])*bw,in0y=v0y-(off0y=_extrude[4*i+1])*bw,in1x=v1x-(off1x=_extrude[4*j])*bw,in1y=v1y-(off1y=_extrude[4*j+1])*bw,out0x=v0x+off0x*bw,out0y=v0y+off0y*bw,out1x=v1x+off1x*bw,out1y=v1y+off1y*bw,this.appendVertexData(in0x,in0y,color,_nw.x,_nw.y),this.appendVertexData(in1x,in1y,color,_nw.x,_nw.y),this.appendVertexData(out1x,out1y,color,_n.x,_n.y),this.appendVertexData(in0x,in0y,color,_nw.x,_nw.y),this.appendVertexData(out0x,out0y,color,_n.x,_n.y),this.appendVertexData(out1x,out1y,color,_n.x,_n.y)}_extrude.length=0,_vertices.length=0,this._dirty=!0}}else this._drawSegments(verts,borderWidth,borderColor,!0)},_drawSegments:function(verts,borderWidth,borderColor,closePoly){if(!((borderWidth=null==borderWidth?this._lineWidth:borderWidth)<=0)){null==(borderColor=borderColor||this._drawColor).a&&(borderColor.a=255),borderWidth*=.5;var v0x,v0y,v1x,v1y,v2x,v2y,factor,offx,offy,i,count=verts.length;for(_extrude.length=0,i=0;i<count;i+=2)v0x=verts[(i-2+count)%count],v0y=verts[(i-1+count)%count],v1x=verts[i],v1y=verts[i+1],v2x=verts[(i+2)%count],v2y=verts[(i+3)%count],_n.x=v0y-v1y,_n.y=v1x-v0x,_nw.x=v1y-v2y,_nw.y=v2x-v1x,cc.pNormalizeIn(_n),cc.pNormalizeIn(_nw),factor=_n.x*_nw.x+_n.y*_nw.y+1,offx=(_n.x+_nw.x)/factor,offy=(_n.y+_nw.y)/factor,_extrude.push(offx,offy,_nw.x,_nw.y);var vertexCount=3*(3*(count/=2)-2);if(this._ensureCapacity(this._vertexCount+vertexCount)){var off0x,off0y,off1x,off1y,in0x,in0y,in1x,in1y,out0x,out0y,out1x,out1y,len=closePoly?count:count-1;for(i=0;i<len;i++){var j=(i+1)%count;v0x=verts[2*i],v0y=verts[2*i+1],v1x=verts[2*j],v1y=verts[2*j+1],_n.x=_extrude[4*i+2],_n.y=_extrude[4*i+3],in0x=v0x-(off0x=_extrude[4*i])*borderWidth,in0y=v0y-(off0y=_extrude[4*i+1])*borderWidth,in1x=v1x-(off1x=_extrude[4*j])*borderWidth,in1y=v1y-(off1y=_extrude[4*j+1])*borderWidth,out0x=v0x+off0x*borderWidth,out0y=v0y+off0y*borderWidth,out1x=v1x+off1x*borderWidth,out1y=v1y+off1y*borderWidth,this.appendVertexData(in0x,in0y,borderColor,-_n.x,-_n.y),this.appendVertexData(in1x,in1y,borderColor,-_n.x,-_n.y),this.appendVertexData(out1x,out1y,borderColor,_n.x,_n.y),this.appendVertexData(in0x,in0y,borderColor,-_n.x,-_n.y),this.appendVertexData(out0x,out0y,borderColor,_n.x,_n.y),this.appendVertexData(out1x,out1y,borderColor,_n.x,_n.y)}_extrude.length=0,this._dirty=!0}}},clear:function(){this.release(),this._dirty=!0},_createRenderCmd:function(){return new cc.DrawNode.WebGLRenderCmd(this)}})}}),cc.DrawNode.CanvasRenderCmd=function(renderableObject){this._rootCtor(renderableObject),this._needDraw=!0,this._buffer=null,this._drawColor=null,this._blendFunc=null},cc.DrawNode.CanvasRenderCmd.prototype=Object.create(cc.Node.CanvasRenderCmd.prototype),cc.DrawNode.CanvasRenderCmd.prototype.constructor=cc.DrawNode.CanvasRenderCmd,cc.DrawNode.CanvasRenderCmd.prototype.getLocalBB=function(){return this._node._localBB},cc.extend(cc.DrawNode.CanvasRenderCmd.prototype,{rendering:function(ctx,scaleX,scaleY){var wrapper=ctx||cc._renderContext,alpha=(wrapper.getContext(),this._node._displayedOpacity/255);if(0!==alpha){wrapper.setTransform(this._worldTransform,scaleX,scaleY),wrapper.setGlobalAlpha(alpha),this._blendFunc&&this._blendFunc.src===cc.SRC_ALPHA&&this._blendFunc.dst===cc.ONE&&wrapper.setCompositeOperation("lighter");for(var locBuffer=this._buffer,i=0,len=locBuffer.length;i<len;i++){var element=locBuffer[i];switch(element.type){case cc.DrawNode.TYPE_DOT:this._drawDot(wrapper,element,scaleX,scaleY);break;case cc.DrawNode.TYPE_SEGMENT:this._drawSegment(wrapper,element,scaleX,scaleY);break;case cc.DrawNode.TYPE_POLY:this._drawPoly(wrapper,element,scaleX,scaleY)}}}},_drawDot:function(wrapper,element){var locColor=element.fillColor,locPos=element.verts[0],locRadius=element.lineWidth,ctx=wrapper.getContext();wrapper.setFillStyle("rgba("+(0|locColor.r)+","+(0|locColor.g)+","+(0|locColor.b)+","+locColor.a/255+")"),ctx.beginPath(),ctx.arc(locPos.x,-locPos.y,locRadius,0,2*Math.PI,!1),ctx.closePath(),ctx.fill()},_drawSegment:function(wrapper,element,scaleX){var locColor=element.lineColor,locFrom=element.verts[0],locTo=element.verts[1],locLineWidth=element.lineWidth,locLineCap=element.lineCap,ctx=wrapper.getContext();wrapper.setStrokeStyle("rgba("+(0|locColor.r)+","+(0|locColor.g)+","+(0|locColor.b)+","+locColor.a/255+")"),ctx.lineWidth=locLineWidth*scaleX,ctx.beginPath(),ctx.lineCap=locLineCap,ctx.moveTo(locFrom.x,-locFrom.y),ctx.lineTo(locTo.x,-locTo.y),ctx.stroke()},_drawPoly:function(wrapper,element,scaleX){var locVertices=element.verts,locLineCap=element.lineCap;if(null!=locVertices){var locFillColor=element.fillColor,locLineWidth=element.lineWidth,locLineColor=element.lineColor,locIsClosePolygon=element.isClosePolygon,locIsFill=element.isFill,locIsStroke=element.isStroke,ctx=wrapper.getContext(),firstPoint=locVertices[0];ctx.lineCap=locLineCap,locFillColor&&wrapper.setFillStyle("rgba("+(0|locFillColor.r)+","+(0|locFillColor.g)+","+(0|locFillColor.b)+","+locFillColor.a/255+")"),locLineWidth&&(ctx.lineWidth=locLineWidth*scaleX),locLineColor&&wrapper.setStrokeStyle("rgba("+(0|locLineColor.r)+","+(0|locLineColor.g)+","+(0|locLineColor.b)+","+locLineColor.a/255+")"),ctx.beginPath(),ctx.moveTo(firstPoint.x,-firstPoint.y);for(var i=1,len=locVertices.length;i<len;i++)ctx.lineTo(locVertices[i].x,-locVertices[i].y);locIsClosePolygon&&ctx.closePath(),locIsFill&&ctx.fill(),locIsStroke&&ctx.stroke()}}}),cc.DrawNode.WebGLRenderCmd=function(renderableObject){this._rootCtor(renderableObject),this._needDraw=!0,this._matrix=new cc.math.Matrix4,this._matrix.identity()},cc.DrawNode.WebGLRenderCmd.prototype=Object.create(cc.Node.WebGLRenderCmd.prototype),cc.DrawNode.WebGLRenderCmd.prototype.constructor=cc.DrawNode.WebGLRenderCmd,cc.DrawNode.WebGLRenderCmd.prototype.rendering=function(ctx){var node=this._node;if(node._vertexCount>0){var wt=this._worldTransform;this._matrix.mat[0]=wt.a,this._matrix.mat[4]=wt.c,this._matrix.mat[12]=wt.tx,this._matrix.mat[1]=wt.b,this._matrix.mat[5]=wt.d,this._matrix.mat[13]=wt.ty,cc.glBlendFunc(node._blendFunc.src,node._blendFunc.dst),this._shaderProgram.use(),this._shaderProgram._setUniformForMVPMatrixWithMat4(this._matrix),node._render()}};